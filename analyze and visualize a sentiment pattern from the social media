import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.pipeline import make_pipeline
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.preprocessing import LabelEncoder

# Load the data
train_data_path =  r"C:\temp\jupyter\twitter_training.csv"
test_data_path =   r"C:\temp\jupyter\twitter_validation.csv"

train_data = pd.read_csv(train_data_path, names=['id','entity','sentiment','text'], header=0) 
test_data = pd.read_csv(test_data_path, names=['id','entity','sentiment','text'], header=0)


# Preview the data
print("Training Data:")
print(train_data.head())
print("Testing Data:")
print(test_data.head())

# Check for null values
print("Null values in training data:", train_data.isnull().sum())
print("Null values in testing data:", test_data.isnull().sum())

# Data Preprocessing: Basic cleaning
# Assuming the column 'text' contains tweet text and 'sentiment' has sentiment labels
train_data.dropna(subset=['text', 'sentiment'], inplace=True)
test_data.dropna(subset=['text', 'sentiment'], inplace=True)

# Encoding Sentiments
le = LabelEncoder()
train_data['sentiment'] = le.fit_transform(train_data['sentiment'])
test_data['sentiment'] = le.transform(test_data['sentiment'])

# Vectorization and Model Training Pipeline
pipeline = make_pipeline(
    CountVectorizer(stop_words='english', max_features=5000),
    TfidfTransformer(),
    LogisticRegression(max_iter=1000)
)

# Train the model
pipeline.fit(train_data['text'], train_data['sentiment'])

# Predict on the test data
test_predictions = pipeline.predict(test_data['text'])

# Evaluate the model
accuracy = accuracy_score(test_data['sentiment'], test_predictions)
print(f"Model Accuracy: {accuracy:.2f}")
print("Classification Report:\n", classification_report(test_data['sentiment'], test_predictions))

# Confusion Matrix
conf_mat = confusion_matrix(test_data['sentiment'], test_predictions)
sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues', xticklabels=le.classes_, yticklabels=le.classes_)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title("Confusion Matrix")
plt.show()

# Sentiment Distribution in Training and Test Sets
plt.figure(figsize=(10, 5))

# Training Sentiment Distribution
plt.subplot(1, 2, 1)
sns.countplot(x=train_data['sentiment'], palette='viridis')
plt.title("Training Sentiment Distribution")
plt.xticks(ticks=np.arange(len(le.classes_)), labels=le.classes_)

# Test Sentiment Distribution
plt.subplot(1, 2, 2)
sns.countplot(x=test_data['sentiment'], palette='viridis')
plt.title("Test Sentiment Distribution")
plt.xticks(ticks=np.arange(len(le.classes_)), labels=le.classes_)

plt.tight_layout()
plt.show()
